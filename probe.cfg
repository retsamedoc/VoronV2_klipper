####################################################################
#  Probe
#####################################################################

[probe]
## Klicky Probe
## This probe is not used for Z height, only Quad Gantry Leveling and
## auto_z 
pin: Z_MAX
x_offset: 0
y_offset: 19.75
z_offset: 6.42
speed: 4
lift_speed: 15
samples: 3
samples_result: median
sample_retract_dist: 1.5
#samples_tolerance: 0.005
samples_tolerance_retries: 1
drop_first_result: true

[quad_gantry_level]
gantry_corners:
   -60,-10
   410,420
points:
   50,25
   50,275
   300,275
   300,25
speed: 1000
horizontal_move_z: 15
retries: 5
retry_tolerance: 0.0075
max_adjust: 10

[z_calibration]
#   The X and Y coordinates (in mm) for clicking the nozzle on the Z endstop
probe_nozzle_x: 226 
probe_nozzle_y: 350

#   The X and Y coordinates (in mm) for clicking the probe's switch on the Z endstop
probe_switch_x: 223
probe_switch_y: 328

# position on bed for print surface probing
#probe_bed_x: default from relative_reference_index of bed_mesh
#probe_bed_y: default from relative_reference_index of bed_mesh
switch_offset: 0.470 # 0.670 ; smaller is more away from bed!
max_deviation: 0.8
speed: 300
clearance: 10 #5
#samples: 5
#samples_tolerance: 0.01 #0.006
#samples_tolerance_retries: 10
#samples_result: median
#position_min: -5
#lift_speed: 5 #8
#probing_speed: 7 #10
probing_second_speed: 5
probing_retract_dist: 2
probing_first_fast: true
#start_gcode: Dock_Probe_Unlock
#before_switch_gcode: Attach_Probe
#end_gcode: Dock_Probe


#####################################################################
#  Menu
#####################################################################
[menu __main __control __qgl]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: QGL
index: 3
gcode: QUAD_GANTRY_LEVEL


#####################################################################
#  Macros
#####################################################################
## customize QUAD GANTRY LEVEL gcode
[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: _QUAD_GANTRY_LEVEL
variable_done: False
description: Conform a moving, twistable gantry to the shape of a stationary bed with klicky automount
gcode:
  SET_GCODE_VARIABLE MACRO=QUAD_GANTRY_LEVEL VARIABLE=done VALUE={ False }
  SMARTHOME

  _CheckProbe action=query
  Attach_Probe
  _CheckProbe action=attach

  _SET_Z_CURRENT VAL='HOME'
  # Run a quick QGL just to make sure that we're in the ballpark
  _QUAD_GANTRY_LEVEL SAMPLES=1
  # Do the real thing
  _QUAD_GANTRY_LEVEL {% for p in params
     %}{'%s=%s ' % (p, params[p])}{%
    endfor %}

  G28 Z
  _SET_Z_CURRENT

  Dock_Probe
  _CheckProbe action=dock
  SET_GCODE_VARIABLE MACRO=QUAD_GANTRY_LEVEL VARIABLE=done VALUE={ True }

[delayed_gcode _CHECK_QGL]
gcode:
  # check that QGL ended with no error
  {% if not printer.quad_gantry_level.applied %}
    # stop print if QGL stopped with failuare
    {action_respond_info("CANCEL PRINT BECAUSE OF QGL ERROR")}
    CANCEL_PRINT
    #_LCD_KNOB COLOR=RED BLINK=0.2
    G0 Z30 F1800
    G0 X175 Y175 F18000
  {% endif %}

[gcode_macro QGL]
gcode:
   QUAD_GANTRY_LEVEL

[gcode_macro SMARTQGL]
gcode:
  {% if not printer.quad_gantry_level.applied %}
      QUAD_GANTRY_LEVEL
  {% endif %}

## G-Code M18: Disable all stepper motors
[gcode_macro M18]
rename_existing: M0018
gcode:
  M0018
  SET_GCODE_VARIABLE MACRO=QUAD_GANTRY_LEVEL VARIABLE=done VALUE={ False }

## G-Code M84: Stop idle hold
[gcode_macro M84]
rename_existing: M0084
gcode:
  M0084
  SET_GCODE_VARIABLE MACRO=QUAD_GANTRY_LEVEL VARIABLE=done VALUE={ False }


# This macro was provided by discord user Garrettwp to whom i give my thanks for sharing it with me.
# I have tweaked it a lot.
#
# this macro is  based on the great Annex magprobe dockable probe macros "#Originally developed by Mental, modified for better use on K-series printers by RyanG and Trails"
# that macro can be found here https://github.com/Annex-Engineering/Annex-Engineering_Other_Printer_Mods/blob/master/All_Printers/Microswitch_Probe/Klipper_Macros/dockable_probe_macros.cfg
#
# by standing on the shoulders of giants, lets see if we can see further
# Klicky-probe.cfg version 16-11-2021 01
[gcode_macro User_Variables]
variable_verbose:               True  # Enable verbose output
variable_travel_speed:          200   # how fast all other travel moves will be performed when running these macros
variable_dock_speed:            50    # how fast should the toolhead move when docking the probe for the final movement
variable_release_speed:         100   # how fast should the toolhead move to release the hold of the magnets after docking
variable_z_drop_speed:          20    # how fast the z will lower when moving to the z location to clear the probe
variable_home_z_height:         15    # Z when homing

#bed type
variable_gravity:           'gantry'  # What goes down with gravity, bed or gantry?
variable_max_bed_y:             250   # maximum Bed size avoids doing a probe_accuracy outside the bed

# if a separate Z endstop switch is in
# use, specify the coordinates of the switch here (Voron).
# Set to 0 to have the probe move to center of bed
variable_z_endstop_x:            226
variable_z_endstop_y:            350

#dock location
variable_docklocation_x:        275   # X Dock position
variable_docklocation_y:        350   # Y Dock position
variable_docklocation_z:        10    # Z dock position,  (-128 for a gantry mount)
variable_dockarmslenght:        30    # Dock arms length, toolhead movement necessary to clear the dock arms

#Umbilical to help untangle the umbilical in difficult situations
variable_umbilical:             False # should we untabgle the umbilical
variable_umbilical_x:           15    # X umbilical position
variable_umbilical_y:           15    # Y umbilical position

# location to park the toolhead
variable_park_toolhead:         False # Enable toolhead parking
variable_parkposition_x:        125
variable_parkposition_y:        125
variable_parkposition_z:        30

# Do not modify below
gcode:
    {% set Mx = printer['configfile'].config["stepper_x"]["position_max"]|float %}
    {% set My = printer['configfile'].config["stepper_y"]["position_max"]|float %}
    {% set Ox = printer['configfile'].config["probe"]["x_offset"]|float %}
    {% set Oy = printer['configfile'].config["probe"]["y_offset"]|float %}
    {% set Oz = printer['configfile'].config["probe"]["z_offset"]|float %}

    # if docklocation_z is zero, use Home Z height for safety
    {% if docklocation_z == 0 %}
        SET_GCODE_VARIABLE MACRO=Probe_Variables VARIABLE=docklocation_z VALUE={ home_z_height }
    {% endif %}

   # if docklocation_z is zero, use Home Z height for safety
    {% if docklocation_z == 0 %}
        SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=docklocation_z VALUE={ home_z_height }
    {% endif %}

    # If x, y coordinates are set for z endstop, assign them
    {% if z_endstop_x != 0 or z_endstop_y != 0 %}
        SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }
        SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }

    # if no x, y coordinates for z endstop, assume probe is endstop and move toolhead to center of bed
    {% else %}
        SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }
        SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }
    {% endif %}


[gcode_macro _Probe_Variables]
variable_probe_attached:            False
variable_probe_state:               False
variable_probe_lock:                False
variable_z_endstop_x:               0
variable_z_endstop_y:               0
gcode:


[gcode_macro _exit_point]
gcode:
    {% set function  = 'pre_' ~ params.FUNCTION  %}
    {% set move  = params.MOVE|default(0)  %}
    # mandatory to save the new safe position
    M400
    RESTORE_GCODE_STATE NAME={function} MOVE={move}


[gcode_macro _entry_point]
gcode:
    {% set function  = 'pre_' ~ params.FUNCTION  %}
    # mandatory to save the new safe position
    M400
    SAVE_GCODE_STATE NAME={function}
    # removes the Z offset for better bed based docking
    SET_GCODE_OFFSET Z=0
    # all the macros initially assume absolute positioning
    G90

[gcode_macro _Homing_Variables]
gcode:
    {% set R  = params.RESET|default(0)  %}
    {% if R %}
        SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }
    {% endif %}

# Attach probe and lock it
[gcode_macro Attach_Probe_Lock]
description: Attaches Klicky Probe, can only be docked after unlocking
gcode:
    Attach_Probe
    SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }

# Dock probe and lock it
[gcode_macro Dock_Probe_Unlock]
description: Docks Klicky Probe even if it was locked
gcode:
    SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }
    Dock_Probe

# Unlock Probe
[gcode_macro Probe_Unlock]
description: Unlocks Klicky Probe state
gcode:
    SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }

# Lock Probe
[gcode_macro Probe_Lock]
description: Locks Klicky Probe state
gcode:
    SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }

# Attach Probe Routine
[gcode_macro Attach_Probe]
description: Attaches Klicky Probe
gcode:
    # Get probe attach status
    {% set P = printer["gcode_macro _Probe_Variables"].probe_attached %}
    {% set L = printer["gcode_macro _Probe_Variables"].probe_lock %}
    {% set V = printer["gcode_macro _User_Variables"].verbose %}
    # Get Docking location
    {% set Mx = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}
    {% set My = printer["gcode_macro _User_Variables"].dockmove_y|default(0)  %}
    {% set Mz = printer["gcode_macro _User_Variables"].dockmove_z|default(0)  %}
    {% set Dx = printer["gcode_macro _User_Variables"].docklocation_x  %}
    {% set Dy = printer["gcode_macro _User_Variables"].docklocation_y  %}
    {% set Dz = printer["gcode_macro _User_Variables"].docklocation_z  %}
    {% set Ax = printer["gcode_macro _User_Variables"].attachmove_x|default(0)  %}
    {% set Ay = printer["gcode_macro _User_Variables"].attachmove_y|default(0)  %}
    {% set Az = printer["gcode_macro _User_Variables"].attachmove_z|default(0)  %}
    {% set Gm = printer["gcode_macro _User_Variables"].gravity %}
    {% set Da = printer["gcode_macro _User_Variables"].dockarmslenght|default(0)  %}
    # Safe Z for travel
    {% set Hzh = printer["gcode_macro _User_Variables"].home_z_height|float %}
    #Set speed
    {% set St = printer["gcode_macro _User_Variables"].travel_speed * 60    %}
    {% set Sd = printer["gcode_macro _User_Variables"].dock_speed * 60    %}
    {% set Sr = printer["gcode_macro _User_Variables"].release_speed * 60    %}
    {% set Sz = printer["gcode_macro _User_Variables"].z_drop_speed * 60    %}

   _entry_point function=Attach_Probe

    #if there is no undock movement, assume older behavior
    {% if Mx == My == Mz == 0 %}
        {% set Mx = 40 %}
    {% endif %}
    #if there is no Attach movement, assume older behavior
    {% if Ax == Ay == Az == 0 %}
        {% set Ay = Da %}
    {% endif %}

    # if x and y are not homed
    {% if not 'xy' in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home X and Y Axis First!") }

    # If probe not attached and locked
    {% elif not P and not L %}
        {% if V %}
            { action_respond_info("Attaching Probe") }
        {% endif %}

        {% if (not 'z' in printer.toolhead.homed_axes) %}
            {% if V %}
                { action_respond_info("Resetting Z position to zero") }
            {% endif %}
            SET_KINEMATIC_POSITION Z=0
            {% if ('bed' in Gm) %} # checks if the bed or gantry move with gravity
                {% set  Hzh = 0 %}
            {% elif ('gantry' in Gm) %} # checks if the bed or gantry move with gravity
                {% set  Hzh = Hzh %}
            {% else %}
                { action_raise_error("To avoid head crashes, configure Klicky probe gravity variable!") }
            {% endif %}

        {% endif %}
        #prior to saving actual position, check if its necessary to move to a safe Z
        #that has enought overhead for the attached probe
        {% if (printer.toolhead.position.z < Hzh) %}
            {% if V %}
                { action_respond_info("moving to a safe Z distance") }
            {% endif %}
            G0 Z{Hzh} F{Sz}
        {% endif %}

        {% if (not 'z' in printer.toolhead.homed_axes) %}
            {% if V %}
                { action_respond_info("Resetting Z position to zero") }
            {% endif %}
            SET_KINEMATIC_POSITION Z=0
        {% endif %}

        {% if (printer.toolhead.position.z < Hzh) %}
            G0 Z{Hzh} F{Sz}
        {% endif %}

        _Umbilical_Path

        # Probe entry location
        G0 X{Dx|int - Ax|int} Y{Dy|int - Ay|int} F{St}
        {% if Dz != -128 %}
            G0 Z{Dz|int - Az|int} F{Sd}
        {% endif %}

        # Drop Probe to Probe location
        {% if Dz != -128 %}
            G0 Z{Dz} F{Sd}
        {% endif %}
        G0 X{Dx} Y{Dy} F{Sd}

        # Probe Attach
        {% if Dz != -128 %}
        G0 Z{Dz|int - Az|int} F{Sz}
        {% endif %}
        G0 X{Dx|int - Ax|int} Y{Dy|int - Ay|int} F{Sr}

        #Go to Z safe distance
        {% if (printer.toolhead.position.z < Hzh) %}
          G0 Z{Hzh} F{Sz}
        {% endif %}

        _Park_Toolhead

        _CheckProbe action=attach

    {% elif L %}
        {% if V %}
            { action_respond_info("Probe locked!") }
        {% endif %}

        # Probe attached, do nothing
        _CheckProbe action=query

    {% else %}
        {% if V %}
            { action_respond_info("Probe already attached!") }
        {% endif %}

        # Probe attached, do nothing
        _CheckProbe action=query

    {% endif %}
    _exit_point function=Attach_Probe

# Dock Probe Routine
[gcode_macro Dock_Probe]
description: Docks Klicky Probe
gcode:
    # Get probe attach status
    {% set P = printer["gcode_macro _Probe_Variables"].probe_attached %}
    {% set L = printer["gcode_macro _Probe_Variables"].probe_lock %}
    {% set V = printer["gcode_macro _User_Variables"].verbose %}
    # Get Docking location
    {% set Mx = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}
    {% set My = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}
    {% set Mz = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}
    {% set Dx = printer["gcode_macro _User_Variables"].docklocation_x %}
    {% set Dy = printer["gcode_macro _User_Variables"].docklocation_y %}
    {% set Dz = printer["gcode_macro _User_Variables"].docklocation_z %}
    {% set Ax = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}
    {% set Ay = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}
    {% set Az = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}
    {% set Da = printer["gcode_macro _User_Variables"].dockarmslenght|default(0)  %}
    # Safe Z for travel
    {% set Hzh = printer["gcode_macro _User_Variables"].home_z_height|float %}
    # Set speed
    {% set St = printer["gcode_macro _User_Variables"].travel_speed * 60    %}
    {% set Sd = printer["gcode_macro _User_Variables"].dock_speed * 60    %}
    {% set Sr = printer["gcode_macro _User_Variables"].release_speed * 60    %}
    {% set Sz = printer["gcode_macro _User_Variables"].z_drop_speed * 60    %}

    #if there is no undock movement, assume older behavior
    {% if Mx == My == Mz == 0 %}
        {% set Mx = 40 %}
    {% endif %}
    #if there is no Attach movement, assume older behavior
    {% if Ax == Ay == Az == 0 %}
        {% set Ay = Da %}
    {% endif %}

    _entry_point function=Dock_Probe

    {% if not 'xyz' in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home X, Y and Z Axis First!") }

    # If probe not attached and not locked
    {% elif P and not L %}
        {% if V %}
            { action_respond_info("Docking Probe") }
        {% endif %}

        {% if (printer.toolhead.position.z < Hzh) %}
            G0 Z{Hzh} F{Sz}
        {% endif %}

        _Umbilical_Path

        # Probe entry location
        G0 X{Dx|int - Ax|int} Y{Dy|int - Ay|int} F{St}
        {% if Dz != -128 %}
            G0 Z{Dz|int - Az|int} F{Sd}
        {% endif %}
        # Drop Probe to Probe location
        G0 X{Dx} Y{Dy} F{Sd}
        {% if Dz != -128 %}
            G0 Z{Dz} F{Sd}
        {% endif %}
        # Probe decoupling
                {% if Dz != -128 %}
            G0 Z{Dz|int + Mz|int} F{Sr}
        {% endif %}
        G0 X{Dx|int + Mx|int} Y{Dy|int + My|int} F{Sr}
        #Go to Z safe distance
        {% if (printer.toolhead.position.z < Hzh) %}
          G0 Z{Hzh} F{Sz}
        {% endif %}

        _Park_Toolhead

        G4 P1000
        _CheckProbe action=dock

    {% elif L %}
        {% if V %}
            { action_respond_info("Probe locked!") }
        {% endif %}

        # Probe docked, do nothing
        _CheckProbe action=query

    {% else %}
        {% if V %}
            { action_respond_info("Probe already docked!") }
        {% endif %}

        # Probe docked, do nothing
        _CheckProbe action=query

    {% endif %}
    _exit_point function=Dock_Probe

# Probe Calibrate
[gcode_macro PROBE_CALIBRATE]
rename_existing: _PROBE_CALIBRATE
description:Calibrate the probe's z_offset with klicky automount
gcode:
    {% set Hzh = printer["gcode_macro _User_Variables"].home_z_height|float %}
    {% set Sz = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
    {% set St = printer["gcode_macro _User_Variables"].travel_speed %}
    {% set Mx = printer['configfile'].config["stepper_x"]["position_max"]|float %}
    {% set My = printer['configfile'].config["stepper_y"]["position_max"]|float %}
    {% set Ox = printer['configfile'].config["probe"]["x_offset"]|float %}
    {% set Oy = printer['configfile'].config["probe"]["y_offset"]|float %}
    {% if not 'xyz' in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home X, Y and Z Axis First!") }
    {% endif %}
    _entry_point function=PROBE_CALIBRATE
    # Go to Z safe distance before saving location in order to
    # avoid crashing the probe on the bed when coming back
    {% if (printer.toolhead.position.z < Hzh) %}
        G0 Z{Hzh} F{Sz}
    {% endif %}
    #Protect against PROBE CALIBRATE performed from outside the bed
    {% if (printer['gcode_move'].position.y > (My - Oy)) or (printer['gcode_move'].position.x > (Mx - Ox)) or (printer['gcode_move'].position.x < Ox) %}
      { action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED!!!") }
    {% endif%}
    M400 # mandatory to save the new safe position
    SAVE_GCODE_STATE NAME=_original_nozzle_location
    _CheckProbe action=query
    Attach_Probe
    # Restore nozzle location to probe the right place
    RESTORE_GCODE_STATE NAME=_original_nozzle_location MOVE=1 MOVE_SPEED={St}
    _PROBE_CALIBRATE {% for p in params
            %}{'%s=%s ' % (p, params[p])}{%
           endfor %}
        #store current nozzle location
        SAVE_GCODE_STATE NAME=_original_nozzle_location
    Dock_Probe
    # Restore nozzle location again at the end
    RESTORE_GCODE_STATE NAME=_original_nozzle_location MOVE=1 MOVE_SPEED={St}
        _exit_point function=PROBE_CALIBRATE
# Probe Accuracy
[gcode_macro PROBE_ACCURACY]
rename_existing: _PROBE_ACCURACY
description:Probe Z-height accuracy at current XY position with klicky automount
gcode:
    {% set Hzh = printer["gcode_macro _User_Variables"].home_z_height|float %}
    {% set Sz = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
    {% set St = printer["gcode_macro _User_Variables"].travel_speed %}
    {% set By = printer["gcode_macro _User_Variables"].max_bed_y %}
    {% set Oy = printer['configfile'].config["probe"]["y_offset"]|float %}
    {% if not 'xyz' in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home X, Y and Z Axis First!") }
    {% endif %}
    _entry_point function=PROBE_ACCURACY
    # Go to Z safe distance before saving location in order to
    # avoid crashing the probe on the bed when coming back
    {% if (printer.toolhead.position.z < Hzh) %}
        G0 Z{Hzh} F{Sz}
    {% endif %}
    #Protect against PROBE ACCURACY performed from outside the bed
    {% if (printer.toolhead.position.y > (By - Oy)) %}
      { action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED!!!") }
    {% endif%}
    M400 # mandatory to save the new safe position
    SAVE_GCODE_STATE NAME=_original_nozzle_location
    _CheckProbe action=query
    Attach_Probe
    # Restore nozzle location to probe the right place
    RESTORE_GCODE_STATE NAME=_original_nozzle_location MOVE=1 MOVE_SPEED={St}
    _PROBE_ACCURACY {% for p in params
            %}{'%s=%s ' % (p, params[p])}{%
           endfor %}
        #store current nozzle location
        SAVE_GCODE_STATE NAME=_original_nozzle_location
        Dock_Probe
    # Restore nozzle location again at the end
    RESTORE_GCODE_STATE NAME=_original_nozzle_location MOVE=1 MOVE_SPEED={St}
        _exit_point function=PROBE_ACCURACY

# umbilical path setup
[gcode_macro _Umbilical_Path]
gcode:
    {% set Ux = printer["gcode_macro _User_Variables"].umbilical_x %}
    {% set Uy = printer["gcode_macro _User_Variables"].umbilical_y %}
    {% set U = printer["gcode_macro _User_Variables"].umbilical    %}
    {% set Hzh = printer["gcode_macro _User_Variables"].home_z_height|float %}
    {% set St = printer["gcode_macro _User_Variables"].travel_speed * 60    %}
    {% if U %}
        # Used to give the umbilical a better path to follow and coil properly if dock is tight in space
                _entry_point function=Umbilical_Path
        G0 X{Ux} Y{Uy} Z{Hzh} F{St}
                _exit_point function=Umbilical_Path
    {% endif %}

# check to see if probe is where it is supposed to be after
# attaching/docking maneuver and set homing error or shutdown
[gcode_macro _CheckProbe]
variable_probe_state:           0
gcode:
    Query_Probe
    _SetProbeState action={ params.ACTION }

# due to how templates are evaluated, we have query endstops in one
# macro and call another macro to make decisions based on the result
[gcode_macro _SetProbeState]
gcode:
    {% set P = printer.probe.last_query %}
    {% set V = printer["gcode_macro _User_Variables"].verbose %}
    # If triggered (true), probe not attached
    {% if P %}
        SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }
    # If not triggered (false), probe attached
    {% else %}
        SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }
    {% endif %}
    {% if params.ACTION == 'query' %}
          SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ P }
    {% endif %}
    # if probe fails to attach/detach
    # if not docked
    {% if (not P and params.ACTION == 'dock') %}
        { action_raise_error("Probe dock failed!") }
    {% endif %}
    # if not attached
    {% if P and params.ACTION == 'attach' %}
        { action_raise_error("Probe attach failed!") }
    {% endif %}

# Park Toolhead Routine
[gcode_macro _Park_Toolhead]
gcode:
    {% set P = printer["gcode_macro _User_Variables"].park_toolhead %}
    {% set Px = printer["gcode_macro _User_Variables"].parkposition_x %}
    {% set Py = printer["gcode_macro _User_Variables"].parkposition_y %}
    {% set Pz = printer["gcode_macro _User_Variables"].parkposition_z %}
    {% set St = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
    {% set V = printer["gcode_macro _User_Variables"].verbose %}
    _entry_point function=Park_Toolhead
    {% if (P and 'xyz' in printer.toolhead.homed_axes) %}
        {% if V %}
            { action_respond_info("Parking Toolhead") }
        {% endif %}
        G0 X{Px} Y{Py} Z{Pz} F{St}
    {% endif %}
    _exit_point function=Park_Toolhead

[gcode_macro CALIBRATE_Z]
rename_existing: BASE_CALIBRATE_Z
gcode:
  SMARTHOME
  CheckProbe action=query
  Attach_Probe_Lock
  _CheckProbe action=attach
  _SET_Z_CURRENT VAL='HOME'
  SMARTQGL
  G28 Z
  BASE_CALIBRATE_Z
  _SET_Z_CURRENT
  Dock_Probe_Unlock
  _CheckProbe action=dock
